from functools import cached_property

from inflection import underscore
from sqlalchemy import inspect
from sqlalchemy.engine import Engine
from sqlalchemy.orm import sessionmaker, as_declarative, declared_attr, declarative_base

from strawberry_graphql_mage.core.models import EntityModel
from strawberry_graphql_mage.core.types import IEntityModel


_Base = declarative_base()


class _BaseMeta(type(IEntityModel), type(_Base)):
    pass


class _SQLAlchemyModel(_Base, EntityModel, metaclass=_BaseMeta):
    __abstract__ = True

    @declared_attr
    def __tablename__(self):
        return underscore(self.__name__)

    @cached_property
    def __primary_key__(self):
        return [c.name for c in inspect(self).primary_key]

    @cached_property
    def __primary_key_autogenerated__(self):
        return all(c.autoincrement for c in inspect(self).primary_key)


def create_base_entity(engine: Engine):
    from strawberry_graphql_mage.backends.sqlalchemy.backend import SQLAlchemyBackend
    new_base = declarative_base()
    return type('SQLAlchemyModel', (new_base, _SQLAlchemyModel,), {
        '__backend__': SQLAlchemyBackend(engine),
        '__abstract__': True
    })
